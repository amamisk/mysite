Flutter 理解

■10.Flutterチュートリアル「part1」を実施し理解する。
  ステップ：1.スターターFlutterアプリを作成する
    Hello Worldを出力。
  ステップ2.外部パッケージを使用する
    pubspe：c.yamlファイルが何の事かわからず、FlutterのSDKから実際のファイルに書き込むのかと勘違いしそうでしたが
    「アセットと依存関係を管理」で調べるとAndroidStudioのファイル構成から追加できる事が解りました。
    インポートしたenglish_wordsのWordPair.randomを使って、文字の引き渡し実施。
  ステップ：3.ステートフルウィジェットを追加する
    StatefulWidgetはユーザの操作によって変化するウィジェット。
    枠組みのみを作成したため、アプリに変化なし。
  ステップ：4.無限にスクロールするListViewを作成する。
    ListViewクラスを作成し、WordPair.randomから入力したテキストをリスト表示させた。

■11.Flutterチュートリアル「part2」を実施し理解する。
  ステップ：1〜3
    Part1同様のため省略。
  ステップ：4.リストにアイコンを追加します。
    ハートのアイコン追加とアイコンタップの情報リスト表示する準備。
  ステップ：5.双方向性を追加します。
    ハートのアイコンをタップ可能する。
    onTapを使って赤白の表示変更と状態の保持。
  ステップ：6.新しい画面に移動します。
    リストアイコンの追加とタップ時の画面切り替え。
    保持していたタップ情報の取得と画面作成。
  ステップ：7.テーマを使用してUIを変更します。
    ホーム画面の色を白に変更。

■12.Flutterチュートリアル「Building layouts」を実施し理解する。
  ステップ：0：アプリのベースコードを作成する。
    MaterialAppを作成。
  ステップ：1：レイアウトを図解する。
    アイテムに細かく処理を設定するとネストが深くなる。
  ステップ：2：タイトル行を実装する。
    buildウィジェットで最初のテキスト部分を作成。
  ステップ：3：ボタン行を実装する。
    buttonSectionウィジェットでボタン部分を作成。
  ステップ：4：テキストセクションを実装する。
    textSectionウィジェットでテキスト部分を作成。
  ステップ：5：画像セクションを実装する。
    MaterialAppですべての画面構成と画像の挿入。
  ステップ：6：最後の仕上げ
    ボタン作成用の関数処理追加。

■13.Flutterチュートリアル「Add interactivity」を実施し理解する。
  ステップ：0：準備をする。
    実施済みのためスキップ。
  ステップ：1：ウィジェットの状態を管理するオブジェクトを決定する。
    星アイコンの状態管理を意識。
  ステップ：2：StatefulWidgetのサブクラス。
    ステートフルウィジェットでサブクラス作成。
  ステップ：3：サブクラスの状態。
    星アイコンをユーザタップによって、白抜きと赤塗りつぶしが切り替わるように修正。
　  星アイコンがユーザタップによって、赤塗りつぶしの場合は41にカウントアップする。
  ステップ：4：ステートフルウィジェットをウィジェットツリーに接続します。
    myappからアイコンの処理を置き換えて、処理を反映。



